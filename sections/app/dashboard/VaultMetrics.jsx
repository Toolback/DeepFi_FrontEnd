import styles from 'styles';
import { useContext, useEffect, useState } from 'react';
import { AppDataStoreContext } from 'data/StoreAppData';
import { motion } from 'framer-motion';
import { slideIn, staggerContainer, textVariant } from 'utils/motion';
import TreasuryRenderer from 'components/app/TreasuryRenderer'
import CoinCarousel from 'components/app/CoinCarousel'
import Loader from "components/app/Loader";
import { userAllVaultsMetrics } from 'lib/fetch/userAllVaultsMetrics';
import { getUserVaultData } from '../../../lib/fetch/getUserVaultData';
import { protocolTokens } from 'constants';

const VaultMetrics = () => {
  const [dataLoaded, setDataLoaded] = useState(false);
  const [connected, setConnected] = useState(false);
  const { stateAppData, dispatchAppData } = useContext(AppDataStoreContext);
  const [userState, setUserStats] = useState({
    totalDeposit: [],
    totalClaimable: [],
    totalEarned: [],
    totalBal: 0,
  });

  useEffect(() => {
    setDataLoaded(false);
    const fetchData = async () => {

      let update = await getUserVaultData(stateAppData.vaults, stateAppData.userAddress, stateAppData.provider)
      // await dispatchAppData({ ...stateAppData, type: 'setAppData', vaults: update })

      let metrics = await userAllVaultsMetrics(update, stateAppData.userAddress, stateAppData.provider)
      if (metrics === undefined) {
        console.log("VaultMetrics - Error Metrics Undefined")
        return
      }
      setUserStats(metrics.resUserMetrics);
    }

    if (stateAppData.connected === true) {
      setConnected(true);
      setDataLoaded(false)
      fetchData().then(() => {
        // console.log("ended <3", connected, stateAppData.connected)
        setDataLoaded(true)
      })
    }
  }, [stateAppData.userAddress, stateAppData.vaults])

  return (
    <>
      <section className='sm:pt-8 sm:pb-20 py-12'>
        <motion.div
          variants={staggerContainer}
          initial="hidden"
          whileInView="show"
          viewport={{ once: false, amount: 0.25 }}
          className={`${styles.innerWidth} mx-auto flex flex-col`}
        >
          <div className='flex flex-col w-auto '>
            <div className="flex h-4/5 w-auto items-center">
              <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                <motion.div
                  variants={slideIn('left', 'tween', 0.1, 0.75)}
                  className="overflow-hidden rounded-3xl bg-purple-500/10 shadow-xl lg:grid lg:grid-cols-2 lg:gap-4"
                >
                  <div className="px-6 pt-10 pb-12 sm:px-16 sm:pt-16 lg:py-16 lg:pr-0 xl:py-20 xl:px-20">
                    <div className="lg:self-center ">
                      <h2 className="text-3xl font-bold tracking-tight text-white">
                        <span className="block">Protocol</span>
                      </h2>
                      <p className="mt-4 text-lg leading-6 text-indigo-200">
                        liquidity generated by all strategies
                      </p>
                      {/* <TreasuryRenderer treasury={treasury} /> */}
                    </div>
                  </div>
                  <div className="mb-8">

                    {stateAppData.connected &&
                      <> {dataLoaded ?

                        <div className="flex justify-center items-center pt-8 text-md">
                          <motion.div
                            variants={slideIn('right', 'tween', 0.7, 0.75)}
                            className="mx-auto w-full max-w-lg rounded-lg bg-white/5 p-10 shadow-card xs:p-6 xs:pt-5"
                          >
                            <div className='px-4 sm:pt-2 pb-4'>
                              <h2 className="text-3xl text-right font-bold tracking-tight text-white">
                                <span className="block">My Summary</span>
                              </h2>
                              <p className="mt-4 text-lg text-right leading-6 text-indigo-200">
                                personal metric of all combined vaults
                              </p>
                            </div>
                            <dl className="grid grid-cols-1 gap-5 sm:grid-cols-2">
                              <div className="overflow-hidden flex flex-col items-center px-4 py-5 sm:p-6  ">
                                <dt className="truncate text-sm font-medium text-gray-300">Total Deposit</dt>
                                <div className='w-[250px] sm:w-[200px]'>
                                  <CoinCarousel coins={userState.totalDeposit} displayNbMobile={1} displayNbDesktop={1} mode={0} />
                                </div>
                              </div>
                              <div className="overflow-hidden flex flex-col items-center px-4 py-5 sm:p-6  ">
                                <dt className="truncate text-sm font-medium text-gray-300">Total Claimable</dt>
                                <div className='w-[250px] sm:w-[200px]'>
                                  <CoinCarousel coins={userState.totalClaimable} displayNbMobile={1} displayNbDesktop={1} mode={0} />
                                </div>                            </div>
                              <div className="overflow-hidden flex flex-col items-center px-4 py-5 sm:p-6  ">
                                <dt className="truncate text-sm font-medium text-gray-300">Total Earned</dt>
                                <div className='w-[250px] sm:w-[200px]'>
                                  <CoinCarousel coins={userState.totalEarned} displayNbMobile={1} displayNbDesktop={1} mode={0} />
                                </div>
                              </div>
                              <div className="overflow-hidden flex flex-col items-center px-4 py-5 sm:p-6  ">
                                <dt className="pb-4 truncate text-sm font-medium text-gray-300">DeFi Balance</dt>
                                <img className="z-30 h-[44px]" src={protocolTokens[0].url} />
              <dt className="truncate text-sm font-medium text-gray-300">{protocolTokens[0].name}</dt>
                                <dd className="mt-1 text-sm  tracking-tigh">{userState?.totalBal}</dd>
                              </div>
                            </dl>
                          </motion.div>
                        </div>
                        : <>
                        <div className='flex justify-center'>

                        <Loader />
                        </div>
                        </>
                      }</>}
                  </div>
                </motion.div>
              </div>
            </div>
          </div>
        </motion.div>
      </section>
    </>
  )
}

export default VaultMetrics